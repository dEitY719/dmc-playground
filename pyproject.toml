[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


# --- 프로젝트 기본 정보 ---
[project]
requires-python = ">=3.10"
version = "0.1.0"
name = "dmc-playground"
description = "A playground for practicing and experimenting with Dash Mantine Components (DMC).   Explore basic examples and various UI/UX patterns for Dash app development."
authors = [{ name = "deitey719", email = "deity719@github.com" }]
dependencies = [
  "aiofiles==24.1.0",
  "aiosqlite==0.21.0",
  "annotated-types==0.7.0",
  "anyio==4.10.0",
  "astroid==3.3.10",
  "asyncpg==0.30.0",
  "backend==0.2.4.1",
  "black==25.1.0",
  "blinker==1.9.0",
  "cachetools==6.1.0",
  "certifi==2025.6.15",
  "chardet==5.2.0",
  "charset-normalizer==3.4.2",
  "click==8.2.1",
  "colorama==0.4.6",
  "dash==3.0.4",
  "dash-mantine-components==2.0.0",
  "dill==0.4.0",
  "distlib==0.3.9",
  "fastapi==0.116.1",
  "filelock==3.18.0",
  "flask==3.0.3",
  "frontend==0.0.3",
  "greenlet==3.2.4",
  "h11==0.16.0",
  "httpcore==1.0.9",
  "httptools==0.6.4",
  "httpx==0.28.1",
  "idna==3.10",
  "importlib-metadata==8.7.0",
  "iniconfig==2.1.0",
  "isort==6.0.1",
  "itsdangerous==2.2.0",
  "jinja2==3.1.6",
  "markupsafe==3.0.2",
  "mccabe==0.7.0",
  "mypy==1.16.1",
  "mypy-extensions==1.1.0",
  "narwhals==1.43.1",
  "nest-asyncio==1.6.0",
  "packaging==25.0",
  "pathspec==0.12.1",
  "platformdirs==4.3.8",
  "plotly==6.1.2",
  "pluggy==1.6.0",
  "psycopg2-binary==2.9.10",
  "pydantic==2.11.7",
  "pydantic-core==2.33.2",
  "pydantic-extra-types==2.10.5",
  "pydantic-settings==2.10.1",
  "pygments==2.19.1",
  "pylint==3.3.7",
  "pylint-exit==1.2.0",
  "pyproject-api==1.9.1",
  "pytest==8.4.1",
  "pytest-asyncio==1.1.0",
  "pytest-mock==3.14.1",
  "python-dotenv==1.1.1",
  "pyyaml==6.0.2",
  "requests==2.32.4",
  "retrying==1.3.4",
  "setuptools==80.9.0",
  "six==1.17.0",
  "sniffio==1.3.1",
  "sqlalchemy==2.0.43",
  "sqlmodel==0.0.24",
  "starlette==0.47.2",
  "tomlkit==0.13.3",
  "tox==4.27.0",
  "types-pyyaml==6.0.12.20250516",
  "types-requests==2.32.4.20250611",
  "types-toml==0.10.8.20240310",
  "typing-extensions==4.14.0",
  "typing-inspection==0.4.1",
  "urllib3==2.5.0",
  "uvicorn==0.35.0",
  "uvloop==0.21.0",
  "virtualenv==20.31.2",
  "watchfiles==1.1.0",
  "websockets==15.0.1",
  "werkzeug==3.0.6",
  "zipp==3.23.0",
]


[project.optional-dependencies]
frontend = [
  "dash>=3.0.4",
  "dash-mantine-components>=2.0.0",
  "plotly>=6.1.2",
]

backend = [
  "fastapi>=0.116.1",
  "uvicorn[standard]",
  "sqlmodel>=0.0.24",
  "psycopg2-binary",
  "sqlalchemy>=2.0.43",
  "aiosqlite>=0.21.0",
  "asyncpg>=0.30.0",
  "httpx>=0.28.1",
]

all = [
  # frontend + backend를 합치되, 중복 패키지는 생략
  "frontend",
  "backend",
]

dev = [
  "tox",
  "ruff",
  "black",
  "isort",
  "mypy",
  "pylint",
  "pylint-exit",
  "pytest",
  "pytest-mock",
  "httpx",
  "pydantic-settings",
  "types-toml",
  "types-requests",
  "types-PyYAML",
  "pydantic-extra-types",
  "types-pytz",
]


[tool.setuptools]
# src 디렉토리를 패키지 루트로 지정하여 src/your_project_name/ 를 패키지로 인식
package-dir = {"" = "src"}


[tool.setuptools.packages.find]
# src 디렉토리 내에서만 패키지를 찾도록 설정
where = ["src"]
exclude = ["asset*", "config*", "tests*"] # 패키지로 인식하고 싶지 않은 디렉토리들을 명시적으로 제외 (*를 붙여 하위 디렉토리 전체를 제외)


[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]


[tool.black]
line-length = 120
target-version = ['py310', 'py311', "py312", "py313"]
skip-string-normalization = false
include = '\.(py|ipynb)$'


exclude = '''
/(
    \.git
  | \.tox
  | \.venv
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"
skip = ["build", ".vscode", ".tox", ".venv"]



[tool.pylint]
max-line-length = 120
ignore = [".venv", ".tox", ".vscode", ".git", "build"]
# R, C 비활성화는 신중하게 접근해야 합니다.
# 초기에는 비활성화하되, 점진적으로 활성화하여 코드 개선을 유도하는 것이 좋습니다.
# 만약 활성화 시 너무 많은 경고가 발생한다면, 특정 규칙만 disable 하세요.
disable = ["R", "C", "W1203", "W0613"]
# disable = ["W1203"] # f-string 경고만 비활성화


[tool.mypy]
mypy_path = "typings"
files = ["src"]

plugins = [
    "sqlalchemy.ext.mypy.plugin",
    "pydantic.mypy",
]
# 엄격한 타입 검사를 위한 추가 옵션들 (권장)
# strict = true # 모든 엄격 모드 활성화 (가장 강력)
ignore_missing_imports = true

# 만약 strict=true 가 너무 부담스럽다면 개별 옵션 활성화
# no_implicit_optional = true # None을 허용하려면 명시적으로 Optional[Type] 사용
# warn_return_any = true # Any를 반환하는 함수에 경고
# warn_unused_ignores = true # 불필요한 # type: ignore 주석에 경고
# disallow_untyped_defs = true # 타입 힌트가 없는 함수 정의에 경고
# disallow_incomplete_defs = true # 일부 타입 힌트가 누락된 함수 정의에 경고
# check_untyped_defs = true # 타입 힌트가 없는 함수 내부도 검사
# disallow_untyped_calls = true # 타입 힌트가 없는 함수 호출에 경고
# mypy 검사에서 제외할 디렉터리 및 파일 패턴 (정규 표현식)
# (?x) 플래그는 정규 표현식 내에서 공백과 주석을 허용하여 가독성을 높입니다.

exclude = '(?:\.venv/|\.tox/|\.vscode/|\.git/|build/|config/tox/|src/frontend/config/)'


[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [".git", ".mypy_cache", ".tox", ".nox", ".venv", "build", "dist", ".vscode"]


[tool.ruff.lint]
# E, F: pyflakes/pycodestyle 기본 규칙
# W: 경고
# I: isort (import 정렬)
# UP: pyupgrade (최신 파이썬 문법 자동 변환)
select = ["E", "F", "W", "I", "UP"]

# pylint의 W1203 (logging-fstring-interpolation)에 해당하는 ruff 규칙(G004) 비활성화
ignore = ["G004"]
  

[tool.ruff.format]
# black과 호환되는 포맷팅 설정
quote-style = "double"
# skip-string-normalization = false