[tox]
envlist = black, isort, mypy, pylint
skip_missing_interpreters = true

[testenv]
skip_install = true
allowlist_externals = *
setenv =
    targetdir = .
    FILTER_EXT = '\.(py|ipynb)$'
    EXCLUDE_DIRS = 'build|dist|.venv|.tox|__pycache__'
    EXCLUDE_DIRS_lint = 'build,dist,.tox,.venv,__pycache__'


[testenv:black]
description = Run black code formatter (modifies files)
deps = black
commands =
    black {env:targetdir} --include '{env:FILTER_EXT}' --exclude 'build|dist|\.venv|\.tox|__pycache__|tox.ini'

[testenv:isort]
description = Run isort import sorter (modifies files)
deps = isort
commands =
    isort {env:targetdir} --filter-files

[testenv:mypy]
description = Run mypy type checker
deps = mypy
    pydantic
    pytest-asyncio
    requests
    fastapi
    uvicorn[standard]
    sqlmodel
    psycopg2-binary
    dash
    dash-mantine-components
    plotly
    httpx
    pydantic-settings
    sqlalchemy
    pytest
    pytest-mock
    types-toml
    types-requests
    types-PyYAML
    pydantic-extra-types
commands =
    mypy --package src --exclude '{env:EXCLUDE_DIRS}' --exclude src/frontend/config --namespace-packages

[testenv:pylint]
description = Run pylint linter
deps = pylint
    pydantic
    pytest-asyncio
    requests
    fastapi
    uvicorn[standard]
    sqlmodel
    psycopg2-binary
    dash
    dash-mantine-components
    plotly
    httpx
    pydantic-settings
    sqlalchemy
    pytest
    pytest-mock
    types-toml
    types-requests
    types-PyYAML
    pydantic-extra-types
commands =
    pylint {env:targetdir} --ignore={env:EXCLUDE_DIRS_lint}

[testenv:lint]
description = Run pylint only (shortcut)
deps = {[testenv:pylint]deps}
commands = {[testenv:pylint]commands}

[testenv:mdlint]
description = Run markdownlint on markdown files
skip_install = true
allowlist_externals = markdownlint
commands =
    markdownlint --fix --config .markdownlint.json '**/*.md'